name: CI/CD Pipeline

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Run tests
      run: pytest

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Convert owner to lowercase
      id: lowercase
      run: |
        LOWER_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        echo "lower_owner=$LOWER_OWNER" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ steps.lowercase.outputs.lower_owner }}/task-tracker:latest
          ghcr.io/${{ steps.lowercase.outputs.lower_owner }}/task-tracker:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # Logowanie do GitHub Container Registry
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Zatrzymanie i usuniÄ™cie starego kontenera
          docker stop task-tracker || true
          docker rm task-tracker || true
          
          # Pobranie najnowszej wersji
          docker pull ghcr.io/${{ github.repository }}/task-tracker:latest
          
          # Uruchomienie nowego kontenera
          docker run -d \
            --name task-tracker \
            --restart unless-stopped \
            -p 8000:8000 \
            -v /home/${{ secrets.SSH_USERNAME }}/task-tracker-data:/app \
            ghcr.io/${{ github.repository }}/task-tracker:latest
          
          # Oczekiwanie na uruchomienie aplikacji
          sleep 10
          
          # Test health check
          curl -f http://localhost:8000/health || exit 1